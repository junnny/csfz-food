#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var conf = require('../config.json');
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var logger = require('../lib/utils//logger').getLogger('default');


// cluster setup
if (!conf.devMode && cluster.isMaster) {
    // Fork workers.
    for (var i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('fork', function (worker) {
        logger.info('Worker ' + worker.process.pid + ' started...');
    });

    cluster.on('exit', function (worker) {
        logger.info('Worker ' + worker.process.pid + ' died');
        if (worker.suicide === true) {
            logger.info(' Worker committed suicide');
        }
        cluster.fork();
    });
} else {

    var server = http.createServer(app);

    server.listen(process.env.PORT || conf.port);
    server.on('error', onError);
    server.on('listening', onListening);
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    logger.info('Listening on ' + bind);
}